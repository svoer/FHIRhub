{
  "faq": [
    {
      "question": "Comment convertir un message HL7 vers FHIR ?",
      "answer": "Pour convertir un message HL7 vers FHIR, accédez à la page 'Conversion' dans le menu principal. Collez votre message HL7 dans la zone de texte, sélectionnez les options de conversion souhaitées et cliquez sur le bouton 'Convertir'. Le résultat au format FHIR apparaîtra dans la zone de droite. Vous pourrez ensuite le télécharger ou l'envoyer directement à un serveur FHIR."
    },
    {
      "question": "Comment puis-je configurer un fournisseur d'IA ?",
      "answer": "Pour configurer un fournisseur d'IA, accédez à la page 'Paramètres IA' dans le menu Administration. Vous pouvez y configurer différents fournisseurs comme Mistral AI, Ollama ou DeepSeek. Pour chaque fournisseur, vous devez spécifier une clé API valide et sélectionner le modèle à utiliser. Le fournisseur marqué comme 'Actif' sera utilisé par toutes les fonctionnalités IA de l'application."
    },
    {
      "question": "Comment utiliser le visualiseur patient ?",
      "answer": "Le visualiseur patient permet d'explorer les données FHIR d'un patient. Accédez à la page 'Visualiseur Patient' depuis le menu principal. Entrez l'identifiant du patient et l'URL du serveur FHIR, puis cliquez sur 'Charger'. Vous pourrez alors consulter toutes les informations du patient réparties dans différents onglets (informations personnelles, conditions médicales, observations, médicaments, consultations). L'analyse IA disponible en bas de page fournit une synthèse intelligente de l'ensemble des données."
    },
    {
      "question": "Comment puis-je explorer un serveur FHIR ?",
      "answer": "Pour explorer un serveur FHIR, utilisez l'explorateur FHIR accessible depuis 'Explorateur FHIR' dans le menu principal. Entrez l'URL du serveur FHIR, sélectionnez le type de ressource à consulter (Patient, Observation, etc.) et cliquez sur 'Rechercher'. Vous pouvez également ajouter des paramètres de recherche avancés pour filtrer les résultats. L'explorateur affiche les ressources trouvées et permet de les consulter en détail."
    },
    {
      "question": "Comment fonctionne le tableau de bord ?",
      "answer": "Le tableau de bord offre une vue d'ensemble des activités de FHIRHub. Il affiche des statistiques sur les conversions HL7 vers FHIR (nombre total, temps moyen, etc.), la répartition des types de messages traités, et l'état du système. Vous pouvez actualiser les données en cliquant sur le bouton 'Rafraîchir' en haut à droite, ou réinitialiser les statistiques avec le bouton 'Réinitialiser' (attention, cette action est irréversible)."
    },
    {
      "question": "Comment installer FHIRHub sur mon propre serveur ?",
      "answer": "FHIRHub peut être installé de deux façons : 1) Installation directe : exécutez le script install.sh (ou install.bat sous Windows) puis démarrez l'application avec start.sh (ou start.bat). 2) Installation Docker : utilisez docker-compose up pour démarrer l'ensemble des services (FHIRHub et HAPI FHIR). Tous les fichiers de données sont stockés dans le dossier 'data' pour faciliter les sauvegardes et les mises à jour."
    },
    {
      "question": "Comment ajouter des utilisateurs à FHIRHub ?",
      "answer": "Pour ajouter des utilisateurs, accédez à la page 'Utilisateurs' dans le menu Administration. Cliquez sur 'Ajouter un utilisateur', remplissez le formulaire avec les informations requises (nom, email, mot de passe) et sélectionnez le rôle approprié (Administrateur, Utilisateur, etc.). Les administrateurs ont accès à toutes les fonctionnalités, tandis que les utilisateurs standards ont des permissions limitées selon leur rôle."
    },
    {
      "question": "Comment utiliser les terminologies françaises ?",
      "answer": "FHIRHub intègre les terminologies françaises standards conformes aux exigences de l'ANS. Ces terminologies sont automatiquement utilisées lors de la conversion de messages HL7 vers FHIR. Pour visualiser ou gérer ces terminologies, accédez à la page 'Terminologies' dans le menu Administration. Vous pouvez y voir les systèmes de codage disponibles et leur statut."
    },
    {
      "question": "Comment puis-je sauvegarder mes données ?",
      "answer": "FHIRHub stocke toutes les données dans le dossier 'data' à la racine de l'application. Pour effectuer une sauvegarde, utilisez le script backup-docker-data.sh qui crée une archive compressée de ce dossier. Pour les installations Docker, les données sont stockées dans des volumes Docker nommés, que vous pouvez sauvegarder avec les commandes Docker standards."
    },
    {
      "question": "Comment générer des clés API pour l'intégration ?",
      "answer": "Pour générer des clés API, accédez à la page 'Clés API' dans le menu Administration. Cliquez sur 'Créer une nouvelle clé', donnez-lui un nom descriptif, sélectionnez l'application associée et définissez les permissions appropriées. Une fois créée, la clé API peut être utilisée pour accéder aux endpoints de l'API FHIRHub de manière sécurisée depuis des applications externes."
    },
    {
      "question": "Comment puis-je nettoyer les fichiers temporaires ?",
      "answer": "Pour nettoyer les fichiers temporaires, utilisez le script clean-temp-files.sh qui supprime les réponses IA stockées, les assets attachés, les fichiers de cache et les logs de conversion. Ce nettoyage aide à maintenir les performances du système et à réduire l'espace disque utilisé. Le script conserve la structure des dossiers et crée des fichiers .gitkeep pour maintenir la structure du projet."
    },
    {
      "question": "Quels types de messages HL7 sont supportés ?",
      "answer": "FHIRHub prend en charge plusieurs types de messages HL7 v2.5. Le type ADT (Admission, Discharge, Transfer) est entièrement implémenté avec tous ses événements (A01, A02, A03, etc.). Les types ORU, SIU, MDM et ORM sont documentés et en cours d'implémentation. Chaque type génère des ressources FHIR spécifiques selon les standards."
    },
    {
      "question": "Comment fonctionne le parser HL7 ?",
      "answer": "Le parser HL7 analyse les messages en plusieurs phases : identification des séparateurs, découpage en segments, analyse des champs, décomposition hiérarchique et construction de l'arbre de données. Il gère les spécificités françaises comme les prénoms composés, les accents et les identifiants spécifiques (IPP, INS, INS-C) selon les OIDs français."
    },
    {
      "question": "Comment utiliser le système de processus visuels ?",
      "answer": "Le système de processus permet de créer des chaînes de traitement personnalisées. Accédez à 'Processus' dans le menu principal, sélectionnez l'application cible, puis utilisez l'éditeur visuel en glisser-déposer pour créer des flux. Les nœuds disponibles incluent l'entrée/sortie, la transformation, la logique, l'intégration et l'analyse."
    },
    {
      "question": "Comment fonctionne le système de cache ?",
      "answer": "FHIRHub utilise un système de cache intelligent à deux niveaux : un cache mémoire LRU stockant les 500 dernières conversions et un cache persistant sur disque. Le cache utilise un hachage SHA-256 du message HL7 comme clé, permettant des performances optimales (<1ms avec cache mémoire, 2-5ms avec cache disque contre 10-50ms sans cache)."
    },
    {
      "question": "Quelles sont les exigences système pour FHIRHub ?",
      "answer": "FHIRHub nécessite Node.js 18.x ou 20.x (v20.15.1 recommandée), SQLite3 (inclus), au minimum 2 Go de RAM (4 Go recommandé), 200 Mo d'espace disque et un navigateur moderne. Fonctionne sur Windows, macOS et Linux. Attention : des problèmes sont connus avec Node.js v22."
    },
    {
      "question": "Comment fonctionne le système RAG du chatbot ?",
      "answer": "Le système RAG (Retrieval-Augmented Generation) utilise une base de connaissances structurée stockée dans data/chatbot-knowledge.json. Lorsqu'une question est posée, il recherche les informations pertinentes, enrichit le prompt envoyé au modèle d'IA et empêche les hallucinations avec des instructions explicites."
    },
    {
      "question": "Comment fonctionnent les API de FHIRHub ?",
      "answer": "FHIRHub expose des APIs RESTful avec double authentification (JWT + clés API). Les principales catégories incluent l'authentification, la conversion HL7-FHIR, la gestion des terminologies et des applications. Une documentation interactive est disponible à /api-reference.html avec des exemples de code pour curl, JavaScript et Python."
    },
    {
      "question": "Comment gérer les nomenclatures médicales ?",
      "answer": "Accédez à 'Nomenclatures' dans le menu pour gérer les terminologies médicales françaises. L'interface permet d'importer des fichiers JSON (ValueSets, CodeSystems, OIDs), visualiser les stats, éditer les descriptions et exporter les terminologies. Les fichiers système (ANS) sont protégés contre la suppression."
    },
    {
      "question": "Comment déployer FHIRHub avec Docker ?",
      "answer": "Utilisez le script docker-init.sh pour l'initialisation automatique, puis docker-compose -f docker-compose.prod.yml up -d pour démarrer. Les données sont stockées dans des volumes persistants. L'approche Docker garantit un déploiement cohérent avec sauvegarde automatique, multi-environnement et support HTTPS via reverse proxy."
    }
  ],
  "features": [
    {
      "name": "Conversion HL7 vers FHIR",
      "description": "Convertit les messages HL7v2.5 en ressources FHIR R4 (v4.0.1) conformes aux spécifications de l'ANS française. Prend en charge les types de messages courants comme ADT, ORU, ORM, MDM, SIU. Les ressources générées peuvent être visualisées, téléchargées ou envoyées directement à un serveur FHIR. Le convertisseur conserve l'information complète, assure la traçabilité et enrichit contextuellement les données."
    },
    {
      "name": "Visualiseur Patient",
      "description": "Interface intuitive pour explorer les données FHIR d'un patient. Affiche les informations personnelles, conditions médicales, observations, médicaments, consultations et autres ressources dans des onglets bien organisés. Inclut une fonction d'analyse IA qui génère un rapport médical complet basé sur toutes les données disponibles, avec connexion multi-serveur et identitovigilance intégrée."
    },
    {
      "name": "Explorateur FHIR",
      "description": "Outil pour interroger et visualiser les ressources d'un serveur FHIR. Permet la recherche par type de ressource avec des filtres avancés, l'affichage détaillé des ressources au format JSON ou dans une vue structurée, et la navigation entre les ressources liées. Compatible avec tout serveur FHIR R4 standard."
    },
    {
      "name": "Intégration IA",
      "description": "Intègre plusieurs fournisseurs d'IA (Mistral, Ollama, DeepSeek) pour l'analyse des données médicales, le chatbot de support et d'autres fonctionnalités intelligentes. Le système RAG enrichit les réponses avec la documentation, génère des analyses patient factuelles et fournit une assistance contextuelle intelligente."
    },
    {
      "name": "Terminologies françaises",
      "description": "Support complet des terminologies médicales françaises conformes aux standards de l'ANS. Inclut CIM-10, CCAM, LOINC, ATC, UCD, SNOMED CT français, RPPS, FINESS. Fonctionnement hors-ligne garanti avec terminologies préchargées et système de cache optimisé."
    },
    {
      "name": "API complète",
      "description": "API RESTful pour intégrer FHIRHub à d'autres applications. Double mécanisme d'authentification JWT + API Keys, endpoints pour conversion, terminologie, applications. Documentation OpenAPI/Swagger interactive disponible. Support CORS, rate limiting configurable et journalisation détaillée."
    },
    {
      "name": "Tableau de bord",
      "description": "Vue d'ensemble des activités et performances du système, incluant des statistiques sur les conversions (nombre total, temps moyen, taux de cache), la répartition des types de messages, l'état du système et les métriques temps réel. Widgets personnalisables avec actualisation instantanée."
    },
    {
      "name": "Système de processus visuels",
      "description": "Éditeur visuel intuitif en glisser-déposer pour créer des chaînes de traitement personnalisées. Nœuds spécialisés pour l'analyse HL7, conversion FHIR, notifications, transformations. Configuration par application avec sauvegarde en base de données et exécution automatique des processus."
    },
    {
      "name": "Parser HL7 optimisé",
      "description": "Module d'analyse syntaxique des messages HL7 v2.5 avec gestion des spécificités françaises : prénoms composés ANS, accents et caractères spéciaux, structures non-standard des SIH français, analyse contextuelle pour les identifiants IPP, INS, INS-C selon les OIDs."
    },
    {
      "name": "Gestion des nomenclatures médicales",
      "description": "Interface complète pour gérer les nomenclatures médicales françaises. Import/export de fichiers JSON, visualisation des stats, support des ValueSets et CodeSystems FHIR, OIDs français. Fichiers système protégés et extensibilité pour nomenclatures personnalisées."
    },
    {
      "name": "Cache intelligent",
      "description": "Système de cache à deux niveaux (mémoire LRU + disque persistant) utilisant SHA-256 pour optimiser les performances. Cache mémoire <1ms, cache disque 2-5ms vs 10-50ms sans cache. API de gestion du cache avec statistiques et nettoyage automatique."
    },
    {
      "name": "Architecture modulaire",
      "description": "Architecture API-first avec modules interconnectés : Parser HL7, Service de terminologie, Convertisseur FHIR, API RESTful. Backend Node.js/Express, SQLite portable, Frontend HTML5/CSS3/JS moderne. Format cible FHIR R4 v4.0.1 conforme ANS."
    }
  ],
  "commands": [
    {
      "name": "install.sh / install.bat",
      "description": "Script d'installation qui configure l'environnement et télécharge les dépendances nécessaires. À exécuter une seule fois avant la première utilisation de FHIRHub."
    },
    {
      "name": "start.sh / start.bat",
      "description": "Script de démarrage qui lance l'application FHIRHub et le serveur HAPI FHIR en arrière-plan. C'est la manière recommandée de démarrer l'application en dehors de Docker."
    },
    {
      "name": "docker-compose up",
      "description": "Commande pour démarrer FHIRHub et le serveur HAPI FHIR en utilisant Docker. Les services sont configurés dans le fichier docker-compose.yml et utilisent les images Docker spécifiées."
    },
    {
      "name": "clean-temp-files.sh",
      "description": "Script qui nettoie les fichiers temporaires, les réponses IA stockées, les assets attachés et les logs de conversion pour maintenir la propreté du système."
    },
    {
      "name": "backup-docker-data.sh",
      "description": "Script qui sauvegarde les données de FHIRHub dans une archive compressée. Utile pour créer des points de restauration avant les mises à jour ou les modifications importantes."
    },
    {
      "name": "docker-init.sh",
      "description": "Script d'initialisation Docker qui automatise la configuration pour un déploiement rapide et simplifié. Configure les volumes persistants et les variables d'environnement."
    },
    {
      "name": "npm install",
      "description": "Commande pour installer toutes les dépendances Node.js nécessaires. À exécuter dans le dossier racine de FHIRHub après décompression de l'archive."
    },
    {
      "name": "npm start",
      "description": "Alternative au script start.sh pour démarrer l'application. Lance le serveur sur le port 5000 par défaut."
    }
  ],
  "api_endpoints": {
    "authentication": [
      {
        "method": "POST",
        "path": "/api/login",
        "description": "Authentification des utilisateurs et génération de JWT"
      },
      {
        "method": "POST",
        "path": "/api/logout",
        "description": "Invalidation des jetons actifs"
      },
      {
        "method": "GET",
        "path": "/api/user",
        "description": "Récupération des informations de l'utilisateur authentifié"
      }
    ],
    "conversion": [
      {
        "method": "POST",
        "path": "/api/convert",
        "description": "Conversion HL7 v2.5 → FHIR R4 (format JSON)"
      },
      {
        "method": "POST",
        "path": "/api/convert/raw",
        "description": "Conversion de texte HL7 pur (format text/plain)"
      },
      {
        "method": "POST",
        "path": "/api/convert/validate",
        "description": "Validation syntaxique des messages HL7"
      },
      {
        "method": "POST",
        "path": "/api/convert/file",
        "description": "Conversion de fichiers HL7 (multipart/form-data)"
      },
      {
        "method": "GET",
        "path": "/api/convert/options",
        "description": "Options de conversion disponibles"
      }
    ],
    "terminology": [
      {
        "method": "GET",
        "path": "/api/terminology/french",
        "description": "Nomenclatures françaises disponibles"
      },
      {
        "method": "GET",
        "path": "/api/terminology/files",
        "description": "Fichiers de terminologie chargés"
      },
      {
        "method": "POST",
        "path": "/api/terminology/refresh",
        "description": "Rafraîchir le cache de terminologies"
      },
      {
        "method": "POST",
        "path": "/api/terminology/analyze",
        "description": "Analyse statistique des terminologies"
      },
      {
        "method": "POST",
        "path": "/api/terminology/import",
        "description": "Import de nouveaux fichiers"
      },
      {
        "method": "GET",
        "path": "/api/terminology/files/:filename",
        "description": "Accès à un fichier spécifique"
      },
      {
        "method": "DELETE",
        "path": "/api/terminology/files/:filename",
        "description": "Suppression de fichier"
      },
      {
        "method": "POST",
        "path": "/api/terminology/export",
        "description": "Export au format ZIP"
      }
    ],
    "applications": [
      {
        "method": "GET",
        "path": "/api/applications",
        "description": "Liste des applications"
      },
      {
        "method": "POST",
        "path": "/api/applications",
        "description": "Création d'application"
      },
      {
        "method": "GET",
        "path": "/api/applications/:id",
        "description": "Détails d'une application"
      },
      {
        "method": "PUT",
        "path": "/api/applications/:id",
        "description": "Mise à jour d'application"
      },
      {
        "method": "DELETE",
        "path": "/api/applications/:id",
        "description": "Suppression d'application"
      },
      {
        "method": "GET",
        "path": "/api/applications/:id/stats",
        "description": "Statistiques d'utilisation"
      }
    ],
    "cache": [
      {
        "method": "GET",
        "path": "/api/cache/stats",
        "description": "Statistiques du cache (taille, hits, misses)"
      },
      {
        "method": "POST",
        "path": "/api/cache/clear",
        "description": "Vider le cache (admin uniquement)"
      }
    ],
    "processus": [
      {
        "method": "POST",
        "path": "/api/processus/execute/:id",
        "description": "Exécuter un processus configuré"
      }
    ]
  },
  "technical_specs": {
    "requirements": {
      "nodejs": "18.x ou 20.x (v20.15.1 recommandée, problèmes connus avec v22)",
      "sqlite": "3 (inclus, pas d'installation séparée)",
      "os": "Windows, macOS ou Linux",
      "ram": "2 Go minimum, 4 Go recommandé",
      "disk": "200 Mo minimum",
      "browser": "Chrome, Firefox, Edge ou Safari récent"
    },
    "architecture": {
      "backend": "Node.js avec Express.js",
      "database": "SQLite pour la portabilité",
      "frontend": "HTML5, CSS3 et JavaScript moderne",
      "auth": "JWT + clés API + HTTPS",
      "cache": "LRU en mémoire + persistance disque"
    },
    "storage": {
      "database": "storage/db/fhirhub.db",
      "cache": "storage/data/cache",
      "terminology": "french_terminology/",
      "assets": "storage/assets/",
      "logs": "logs/"
    }
  },
  "deployment": {
    "docker": {
      "quick_start": "./docker-init.sh && docker-compose -f docker-compose.prod.yml up -d",
      "access": "http://localhost:5000",
      "default_credentials": "admin / admin123",
      "volumes": [
        "fhirhub_data (données persistantes)",
        "fhirhub_logs (journaux)",
        "fhirhub_cache (cache des conversions)"
      ]
    },
    "standalone": {
      "install": "npm install",
      "start": "bash start.sh ou npm start",
      "access": "http://localhost:5000",
      "default_credentials": "admin / admin123"
    }
  },
  "french_oids": {
    "INS": "1.2.250.1.213.1.4.8",
    "INS-C": "1.2.250.1.213.1.4.2",
    "RPPS": "1.2.250.1.71.4.2.1",
    "ADELI": "1.2.250.1.71.4.2.1",
    "FINESS": "1.2.250.1.71.4.2.2",
    "IPP": "1.2.250.1.71.4.2.7"
  },
  "ai_providers": [
    {
      "name": "Mistral AI",
      "description": "Service d'IA français avec des modèles performants (mistral-large-2411) et compatibles RGPD"
    },
    {
      "name": "Ollama",
      "description": "Modèles locaux (installation locale requise, idéal pour les environnements isolés et le fonctionnement hors-ligne)"
    },
    {
      "name": "DeepSeek",
      "description": "Service d'IA alternatif avec des modèles performants"
    }
  ],
  "complete_documentation": {
    "overview": "FHIRHub est une solution robuste de conversion de messages HL7 v2.5 vers le format FHIR R4 (version 4.0.1), conçue spécifiquement pour l'écosystème de santé français et conforme aux standards de l'ANS. Cette documentation explique les mécanismes internes du système et comment l'utiliser efficacement. Le futur du partage de données santé, dès aujourd'hui. Modernisez votre interop, sans refonte, sans complexité. FHIRHub – L'upgrade FHIR, aussi simple qu'un glisser-déposer.",
    "interface": {
      "description": "FHIRHub présente une interface utilisateur intuitive avec une identité visuelle distinctive",
      "features": {
        "charte_graphique": "Design en dégradé rouge-orange, identité visuelle cohérente sur toutes les pages",
        "navigation": "Menu latéral rétractable permettant un accès rapide à toutes les fonctionnalités",
        "recherche": "Champ de recherche intégré au menu pour accéder rapidement aux fonctionnalités",
        "favoris": "Possibilité d'ajouter des pages fréquemment utilisées aux favoris",
        "responsive": "Adaptation automatique à tous les types d'écrans (ordinateurs, tablettes, mobiles)",
        "typographie": "Police Roboto pour une lisibilité optimale sur tous les supports"
      }
    },
    "architecture": {
      "components": [
        {
          "name": "Parser HL7",
          "description": "Module d'analyse syntaxique des messages HL7 v2.5 qui extrait et structure chaque composant"
        },
        {
          "name": "Service de Terminologie",
          "description": "Gestion des mappings entre les codes HL7 et les terminologies françaises (ANS)"
        },
        {
          "name": "Convertisseur FHIR",
          "description": "Transformation des données structurées en ressources FHIR R4 complètes"
        },
        {
          "name": "API RESTful",
          "description": "Endpoints pour l'intégration dans des systèmes existants, avec authentification sécurisée"
        }
      ],
      "tech_stack": {
        "backend": "Node.js avec Express.js",
        "database": "SQLite pour la portabilité",
        "frontend": "Interface moderne basée sur HTML5, CSS3 et JavaScript",
        "target_format": "FHIR R4 (v4.0.1) conforme aux spécifications ANS",
        "security": "JWT + clés API + HTTPS"
      }
    },
    "parser_details": {
      "process": [
        "Identification des séparateurs: Le parser détecte automatiquement les séparateurs utilisés dans le message (champ, composant, répétition, échappement) à partir de l'en-tête MSH",
        "Découpage en segments: Le message est divisé en segments (lignes) identifiés par leur code de 3 caractères (MSH, PID, PV1, etc.)",
        "Analyse des champs: Chaque segment est divisé en champs selon le séparateur principal (généralement |)",
        "Décomposition hiérarchique: Les champs complexes sont décomposés en composants, sous-composants et répétitions selon les séparateurs secondaires (^, &, ~)",
        "Construction de l'arbre de données: Une structure de données hiérarchique est générée, permettant l'accès aux éléments via des chemins logiques"
      ],
      "optimizations": [
        "Détection intelligente des prénoms composés dans les champs PID-5, conformément aux recommandations de l'ANS",
        "Support des accents et caractères spéciaux fréquents dans les noms français (é, è, ê, à, ç, etc.)",
        "Gestion des exceptions pour les structures non-standard parfois rencontrées dans les SIH français",
        "Analyse contextuelle pour déterminer le bon type d'identifiant (IPP, INS, INS-C) selon les OIDs français"
      ]
    },
    "message_types": {
      "supported": {
        "ADT": {
          "status": "Implémenté",
          "description": "Admission, Discharge, Transfer",
          "resources": "Patient, Encounter, Location, EpisodeOfCare",
          "events": ["A01", "A02", "A03", "A04", "A05", "A08", "A11", "A13", "A28", "A31", "A40"]
        },
        "ORU": {
          "status": "Documentation",
          "description": "Observation Results Unsolicited",
          "resources": "Patient, Observation, DiagnosticReport, Specimen"
        },
        "SIU": {
          "status": "Documentation",
          "description": "Scheduling Information Unsolicited",
          "resources": "Patient, Appointment, Schedule, Slot"
        },
        "MDM": {
          "status": "Documentation",
          "description": "Medical Document Management",
          "resources": "Patient, DocumentReference, Binary"
        },
        "ORM": {
          "status": "Documentation",
          "description": "Order Message",
          "resources": "Patient, ServiceRequest, Task"
        }
      }
    },
    "converter_principles": {
      "core": [
        "Conservation complète de l'information : aucune donnée n'est perdue pendant la conversion",
        "Conformité stricte aux profils FHIR français de l'ANS",
        "Traçabilité : chaque élément FHIR peut être relié à son origine dans le message HL7",
        "Enrichissement contextuel : ajout d'informations déduites du contexte pour améliorer l'interopérabilité"
      ],
      "process": [
        "Identification du type de message: Détermination du type d'événement (ADT, ORU, SIU, etc.) pour adapter le processus de conversion",
        "Extraction des entités principales: Création des ressources primaires comme Patient, Encounter, Organization à partir des segments PID, PV1, MSH",
        "Mappage des terminologies: Conversion des codes HL7 en codes FHIR à l'aide des terminologies françaises de l'ANS",
        "Établissement des relations: Création des références entre ressources pour maintenir la cohérence du modèle",
        "Construction du Bundle transaction: Assemblage de toutes les ressources dans un Bundle FHIR de type transaction"
      ],
      "french_adaptations": [
        "Structure des identifiants INS/INS-C avec les bons OIDs (1.2.250.1.213.1.4.8 et 1.2.250.1.213.1.4.2)",
        "Gestion intelligente des établissements de santé avec les identifiants FINESS",
        "Intégration des nomenclatures françaises pour les professions, spécialités et modes de prise en charge",
        "Support de l'extension encounter-expectedExitDate pour les dates de sortie prévue",
        "Structuration des adresses selon le format postal français (code postal à 5 chiffres, etc.)"
      ]
    },
    "patient_viewer": {
      "features": [
        "Informations personnelles: Données démographiques, contacts, identifiants et détails administratifs du patient",
        "Observations cliniques: Résultats de laboratoire, signes vitaux et autres observations médicales, présentés sous forme de tableau avec valeurs et interprétations",
        "Conditions & Problèmes: Diagnostics, pathologies et problèmes médicaux identifiés, avec détails sur leur statut et gravité",
        "Traitements médicamenteux: Médicaments prescrits, posologies, voies d'administration et historique des prescriptions",
        "Consultations & Hospitalisations: Historique des visites médicales, admissions, consultations et séjours hospitaliers",
        "Chronologie médicale: Vue temporelle de tous les événements médicaux du patient, permettant d'identifier les tendances et corrélations",
        "Analyse IA: Synthèse générée par intelligence artificielle, offrant un compte-rendu médical complet et structuré basé sur toutes les données du patient"
      ],
      "technical_capabilities": [
        "Connexion multi-serveur : Compatible avec tout serveur FHIR R4 standard (HAPI FHIR, serveurs publics, etc.)",
        "Recherche avancée : Recherche de patients par nom, identifiant ou autres critères",
        "Identitovigilance : Effacement complet des données lors du changement de patient pour éviter les confusions",
        "Visualisation JSON : Accès aux données brutes JSON pour les utilisateurs techniques",
        "Interface adaptative : Design responsive permettant l'utilisation sur ordinateurs, tablettes et dispositifs mobiles",
        "Respect des standards : Compatible avec les ressources FHIR R4 françaises (ANS) et internationales"
      ]
    },
    "ai_integration": {
      "chatbot": {
        "description": "Chatbot intelligent disponible sur le tableau de bord pour répondre aux questions sur l'utilisation de FHIRHub",
        "features": [
          "Assistance contextuelle: Le chatbot comprend le contexte de votre demande et peut fournir des explications spécifiques",
          "Documentation intelligente: Accès à toute la documentation technique à travers une interface conversationnelle simple",
          "Diagnostic assisté: Aide à identifier et résoudre les problèmes de conversion ou de configuration"
        ]
      },
      "patient_analysis": {
        "description": "Module d'analyse par IA pour générer un compte-rendu médical complet",
        "features": [
          "Synthèse du dossier médical : Génération d'un résumé complet des informations médicales du patient",
          "Mise en relation des données : L'IA analyse et met en relation les informations des différents onglets",
          "Contextualisation : Les données sont présentées de façon chronologique et cliniquement pertinente",
          "Analyse strictement factuelle : Basée uniquement sur les données présentes, sans ajout d'informations extérieures",
          "Mode dégradé : Génération d'un rapport basique en cas d'indisponibilité du service IA"
        ]
      },
      "providers": {
        "mistral": {
          "description": "Service d'IA français avec des modèles performants (mistral-large-2411) et compatibles RGPD",
          "configuration": {
            "api_key": "Clé API Mistral requise",
            "model": "mistral-large-2411",
            "base_url": "https://api.mistral.ai"
          }
        },
        "ollama": {
          "description": "Modèles locaux (installation locale requise, idéal pour les environnements isolés)",
          "configuration": {
            "base_url": "http://localhost:11434",
            "models": ["llama2", "mistral", "codellama"],
            "no_api_key_required": true
          }
        }
      },
      "rag_system": {
        "description": "Système RAG (Génération Augmentée par Récupération) pour améliorer la précision",
        "components": [
          "Base de connaissances structurée : Les informations sur FHIRHub sont stockées dans une base de connaissances JSON",
          "Recherche contextuelle : Lorsqu'une question est posée, le système recherche les informations pertinentes",
          "Enrichissement du prompt : Les informations récupérées sont intégrées au prompt envoyé au modèle d'IA",
          "Protection contre les hallucinations : Des instructions explicites empêchent le modèle d'inventer des réponses",
          "Indication des limites : Le système indique clairement quand il ne dispose pas d'informations suffisantes"
        ]
      }
    },
    "database_structure": {
      "tables": {
        "users": {
          "fields": ["id", "username", "password_hash", "role", "created_at"],
          "purpose": "Informations utilisateurs (admin, user)"
        },
        "applications": {
          "fields": ["id", "name", "description", "created_by"],
          "purpose": "Applications enregistrées dans le système"
        },
        "api_keys": {
          "fields": ["id", "key_hash", "application_id", "is_active", "created_at", "expires_at"],
          "purpose": "Clés API associées aux applications"
        },
        "conversion_logs": {
          "fields": ["id", "source", "user_id", "application_id", "processing_time", "resource_count", "is_cached"],
          "purpose": "Historique des conversions HL7 vers FHIR"
        },
        "system_metrics": {
          "fields": ["timestamp", "cpu_usage", "memory_usage"],
          "purpose": "Métriques système (CPU, mémoire)"
        },
        "ai_providers": {
          "fields": ["id", "name", "api_key_encrypted", "is_active", "model"],
          "purpose": "Configuration des fournisseurs d'IA"
        }
      }
    },
    "api_architecture": {
      "middleware_stack": [
        "cors() - Gestion des requêtes cross-origin",
        "helmet() - Headers de sécurité",
        "compression() - Compression gzip des réponses",
        "express.json({ limit: '10mb' }) - Parsing JSON avec limite",
        "requestLogger - Journalisation des requêtes",
        "rateLimiter - Limitation du débit",
        "authMiddleware - Authentification JWT/API Key",
        "validationMiddleware - Validation des entrées",
        "errorHandler - Gestion centralisée des erreurs"
      ],
      "authentication": {
        "jwt": {
          "generation": "jwt.sign({ userId }, secret, { expiresIn: '24h' })",
          "validation": "jwt.verify(token, secret)",
          "refresh": "Support des refresh tokens (7 jours)"
        },
        "api_keys": {
          "generation": "crypto.randomBytes(32).toString('hex')",
          "storage": "bcrypt.hash avec salt rounds 10",
          "validation": "Comparaison timing-safe"
        }
      }
    },
    "deployment_options": {
      "docker": {
        "quick_start": "./docker-init.sh && docker-compose -f docker-compose.prod.yml up -d",
        "volumes": [
          "fhirhub_data - Données persistantes",
          "fhirhub_logs - Journaux d'application",
          "fhirhub_cache - Cache des conversions"
        ],
        "networking": "Bridge network pour communication inter-conteneurs",
        "health_checks": "Endpoints /health et /ready"
      },
      "standalone": {
        "requirements": {
          "nodejs": "18.x ou 20.x (v20.15.1 recommandée)",
          "ram": "2 Go minimum, 4 Go recommandé",
          "disk": "200 Mo minimum"
        },
        "installation": [
          "npm install - Installation des dépendances",
          "bash start.sh - Démarrage du serveur",
          "Accès via http://localhost:5000"
        ]
      },
      "kubernetes": {
        "resources": {
          "requests": { "memory": "256Mi", "cpu": "100m" },
          "limits": { "memory": "1Gi", "cpu": "500m" }
        },
        "autoscaling": {
          "hpa": {
            "minReplicas": 2,
            "maxReplicas": 10,
            "targetCPUUtilizationPercentage": 70
          }
        }
      }
    },
    "performance_optimizations": {
      "caching": {
        "levels": [
          "Cache mémoire LRU (500 entrées max)",
          "Cache disque persistant (7 jours TTL)"
        ],
        "performance": {
          "memory_cache": "<1ms",
          "disk_cache": "2-5ms",
          "no_cache": "10-50ms"
        }
      },
      "database": [
        "Indexes sur champs fréquemment recherchés",
        "Requêtes SQL optimisées sans ORM",
        "Connection pooling (si migration vers PostgreSQL)"
      ],
      "api": [
        "Compression gzip des réponses",
        "Pagination des résultats volumineux",
        "Rate limiting par IP et API key",
        "CDN pour assets statiques"
      ],
      "processing": [
        "Worker threads pour conversions parallèles",
        "Streaming pour gros fichiers",
        "Lazy loading des terminologies volumineuses"
      ]
    },
    "security_measures": {
      "authentication": [
        "Double authentification JWT + API Keys",
        "Bcrypt pour hachage des mots de passe",
        "Tokens avec expiration configurable"
      ],
      "authorization": [
        "RBAC (Role-Based Access Control)",
        "Permissions granulaires par endpoint",
        "Principe du moindre privilège"
      ],
      "data_protection": [
        "HTTPS obligatoire en production",
        "Chiffrement des données sensibles",
        "Audit trail complet"
      ],
      "input_validation": [
        "Sanitization des entrées utilisateur",
        "Protection XSS et injection SQL",
        "Limite de taille des payloads"
      ],
      "monitoring": [
        "Logs de sécurité détaillés",
        "Alertes sur comportements suspects",
        "Métriques de sécurité en temps réel"
      ]
    }
  }
}