#!/bin/bash

# üê≥ Script d'Installation Automatique FHIRHub avec Docker
# Ce script installe et configure FHIRHub avec toutes ses d√©pendances

set -euo pipefail  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
FHIRHUB_DIR="fhirhub"
FHIRHUB_URL="https://github.com/fhirhub/fhirhub.git"
MIN_DOCKER_VERSION="20.10.0"
MIN_COMPOSE_VERSION="2.0.0"

# Fonction d'affichage
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction de comparaison de version
version_compare() {
    printf '%s\n%s\n' "$1" "$2" | sort -V | head -n1 | [ "$1" = "$(cat)" ]
}

# V√©rification des pr√©requis syst√®me
check_prerequisites() {
    print_status "V√©rification des pr√©requis syst√®me..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©. Veuillez installer Docker Engine >= $MIN_DOCKER_VERSION"
        echo "Installation Docker : https://docs.docker.com/engine/install/"
        exit 1
    fi
    
    # V√©rifier la version Docker
    DOCKER_VERSION=$(docker --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    if ! version_compare "$MIN_DOCKER_VERSION" "$DOCKER_VERSION"; then
        print_error "Version Docker trop ancienne. Requis: >= $MIN_DOCKER_VERSION, Trouv√©: $DOCKER_VERSION"
        exit 1
    fi
    print_success "Docker $DOCKER_VERSION d√©tect√©"
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose >= $MIN_COMPOSE_VERSION"
        exit 1
    fi
    
    # D√©terminer la commande Docker Compose
    if docker compose version &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
        COMPOSE_VERSION=$(docker compose version --short)
    else
        DOCKER_COMPOSE_CMD="docker-compose"
        COMPOSE_VERSION=$(docker-compose --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
    fi
    
    if ! version_compare "$MIN_COMPOSE_VERSION" "$COMPOSE_VERSION"; then
        print_error "Version Docker Compose trop ancienne. Requis: >= $MIN_COMPOSE_VERSION, Trouv√©: $COMPOSE_VERSION"
        exit 1
    fi
    print_success "Docker Compose $COMPOSE_VERSION d√©tect√©"
    
    # V√©rifier les ressources syst√®me
    if [[ -f /proc/meminfo ]]; then
        MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
        MEM_GB=$((MEM_KB / 1024 / 1024))
        if [ $MEM_GB -lt 4 ]; then
            print_warning "RAM disponible: ${MEM_GB}GB. Recommand√©: >= 4GB"
        else
            print_success "RAM disponible: ${MEM_GB}GB"
        fi
    fi
    
    # V√©rifier l'espace disque
    DISK_AVAILABLE=$(df . | tail -1 | awk '{print $4}')
    DISK_GB=$((DISK_AVAILABLE / 1024 / 1024))
    if [ $DISK_GB -lt 10 ]; then
        print_warning "Espace disque disponible: ${DISK_GB}GB. Recommand√©: >= 10GB"
    else
        print_success "Espace disque disponible: ${DISK_GB}GB"
    fi
}

# V√©rification des ports
check_ports() {
    print_status "V√©rification de la disponibilit√© des ports..."
    
    for port in 5000 8080; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            print_error "Port $port d√©j√† utilis√©. Veuillez lib√©rer ce port ou modifier la configuration."
            netstat -tuln | grep ":$port "
            exit 1
        fi
    done
    print_success "Ports 5000 et 8080 disponibles"
}

# Clonage ou mise √† jour du projet
setup_project() {
    print_status "Configuration du projet FHIRHub..."
    
    if [ -d "$FHIRHUB_DIR" ]; then
        print_warning "Le dossier $FHIRHUB_DIR existe d√©j√†"
        read -p "Voulez-vous le mettre √† jour ? (y/N): " -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd "$FHIRHUB_DIR"
            git pull origin main
            cd ..
            print_success "Projet mis √† jour"
        fi
    else
        print_status "Clonage du projet depuis $FHIRHUB_URL"
        git clone "$FHIRHUB_URL" "$FHIRHUB_DIR"
        print_success "Projet clon√©"
    fi
    
    cd "$FHIRHUB_DIR"
}

# Cr√©ation de la structure de dossiers
create_directory_structure() {
    print_status "Cr√©ation de la structure de dossiers..."
    
    # Cr√©er la structure de donn√©es
    mkdir -p data/{fhirhub/{config,logs,cache,terminologies,uploads},hapi-fhir/{database,lucene}}
    mkdir -p docker/{fhirhub,hapi-fhir}
    mkdir -p scripts
    mkdir -p config/examples
    
    print_success "Structure de dossiers cr√©√©e"
}

# Configuration des permissions
setup_permissions() {
    print_status "Configuration des permissions..."
    
    # Permissions de base
    chmod -R 755 data/
    
    # Permissions sp√©cifiques pour les dossiers d'√©criture
    chmod -R 770 data/fhirhub/{logs,cache,uploads} 2>/dev/null || true
    chmod -R 770 data/hapi-fhir/ 2>/dev/null || true
    
    # Cr√©er un utilisateur syst√®me si n√©cessaire (Linux uniquement)
    if [[ "$OSTYPE" == "linux-gnu"* ]] && [ "$EUID" -eq 0 ]; then
        if ! id "fhirhub" &>/dev/null; then
            useradd -r -s /bin/false fhirhub
            print_success "Utilisateur syst√®me 'fhirhub' cr√©√©"
        fi
        chown -R fhirhub:fhirhub data/
        print_success "Permissions utilisateur configur√©es"
    else
        print_success "Permissions de base configur√©es"
    fi
}

# Configuration de l'environnement
setup_environment() {
    print_status "Configuration de l'environnement..."
    
    # Cr√©er le fichier .env s'il n'existe pas
    if [ ! -f .env ]; then
        cat > .env << EOF
# Configuration FHIRHub
NODE_ENV=production
PORT=5000
HAPI_FHIR_URL=http://hapi-fhir:8080/fhir

# S√©curit√©
JWT_SECRET=$(openssl rand -hex 32 2>/dev/null || date +%s | sha256sum | base64 | head -c 32)
API_RATE_LIMIT=1000
CONVERSION_RATE_LIMIT=30
AUTH_RATE_LIMIT=10
ENABLE_SECURITY_HEADERS=true

# Performance
CACHE_MAX_SIZE=1000
CACHE_TTL=3600
NODE_OPTIONS=--max-old-space-size=512

# Timeouts
FHIR_REQUEST_TIMEOUT=30000
FHIR_MAX_RETRY_ATTEMPTS=3
FHIR_RETRY_DELAY=1000
EOF
        print_success "Fichier .env cr√©√© avec configuration par d√©faut"
    else
        print_status "Fichier .env existant conserv√©"
    fi
}

# Construction et d√©marrage des conteneurs
start_services() {
    print_status "Construction et d√©marrage des services..."
    
    # Construire les images
    print_status "Construction de l'image FHIRHub..."
    $DOCKER_COMPOSE_CMD build --no-cache fhirhub
    
    # D√©marrer tous les services
    print_status "D√©marrage des services..."
    $DOCKER_COMPOSE_CMD up -d
    
    print_success "Services d√©marr√©s"
}

# Attendre que les services soient pr√™ts
wait_for_services() {
    print_status "Attente du d√©marrage complet des services..."
    
    # Attendre FHIRHub
    print_status "Attente de FHIRHub (port 5000)..."
    for i in {1..60}; do
        if curl -sf http://localhost:5000/api/system/health >/dev/null 2>&1; then
            print_success "FHIRHub est pr√™t"
            break
        fi
        if [ $i -eq 60 ]; then
            print_error "Timeout: FHIRHub n'a pas d√©marr√© dans les temps"
            $DOCKER_COMPOSE_CMD logs fhirhub
            exit 1
        fi
        sleep 2
    done
    
    # Attendre HAPI FHIR
    print_status "Attente de HAPI FHIR (port 8080)..."
    for i in {1..120}; do
        if curl -sf http://localhost:8080/fhir/metadata >/dev/null 2>&1; then
            print_success "HAPI FHIR est pr√™t"
            break
        fi
        if [ $i -eq 120 ]; then
            print_error "Timeout: HAPI FHIR n'a pas d√©marr√© dans les temps"
            $DOCKER_COMPOSE_CMD logs hapi-fhir
            exit 1
        fi
        sleep 3
    done
}

# Tests de validation
run_validation_tests() {
    print_status "Ex√©cution des tests de validation..."
    
    # Test FHIRHub health
    if curl -sf http://localhost:5000/api/system/health >/dev/null; then
        print_success "‚úì FHIRHub health check r√©ussi"
    else
        print_error "‚úó FHIRHub health check √©chou√©"
        return 1
    fi
    
    # Test HAPI FHIR metadata
    if curl -sf http://localhost:8080/fhir/metadata >/dev/null; then
        print_success "‚úì HAPI FHIR metadata r√©ussi"
    else
        print_error "‚úó HAPI FHIR metadata √©chou√©"
        return 1
    fi
    
    # Test conversion simple
    print_status "Test de conversion HL7‚ÜíFHIR..."
    CONVERSION_RESULT=$(curl -s -X POST http://localhost:5000/api/convert \
        -H "X-API-KEY: dev-key" \
        -H "Content-Type: application/json" \
        -d '{"hl7Message":"MSH|^~\\&|TEST|TEST|||20241216||ADT^A01|1|P|2.5"}' | jq -r '.success' 2>/dev/null || echo "false")
    
    if [ "$CONVERSION_RESULT" = "true" ]; then
        print_success "‚úì Test de conversion r√©ussi"
    else
        print_warning "‚ö† Test de conversion √©chou√© (configuration API key requise)"
    fi
    
    print_success "Tests de validation termin√©s"
}

# Affichage des informations finales
display_final_info() {
    echo
    echo "üéâ Installation FHIRHub termin√©e avec succ√®s!"
    echo
    echo "üìç Services disponibles:"
    echo "   ‚Ä¢ Interface FHIRHub:    http://localhost:5000"
    echo "   ‚Ä¢ API de conversion:    http://localhost:5000/api"
    echo "   ‚Ä¢ Documentation API:    http://localhost:5000/api-reference.html"
    echo "   ‚Ä¢ Serveur HAPI FHIR:    http://localhost:8080/fhir"
    echo
    echo "üîß Commandes utiles:"
    echo "   ‚Ä¢ √âtat des services:    $DOCKER_COMPOSE_CMD ps"
    echo "   ‚Ä¢ Logs en temps r√©el:   $DOCKER_COMPOSE_CMD logs -f"
    echo "   ‚Ä¢ Red√©marrage:          $DOCKER_COMPOSE_CMD restart"
    echo "   ‚Ä¢ Arr√™t:                $DOCKER_COMPOSE_CMD down"
    echo
    echo "üìö Prochaines √©tapes:"
    echo "   1. Acc√©der √† http://localhost:5000"
    echo "   2. Cr√©er un compte administrateur"
    echo "   3. Configurer une cl√© API"
    echo "   4. Tester une conversion HL7‚ÜíFHIR"
    echo
    echo "üìñ Documentation compl√®te: https://github.com/fhirhub/fhirhub/wiki"
    echo
}

# Fonction de nettoyage en cas d'erreur
cleanup_on_error() {
    print_error "Erreur d√©tect√©e. Nettoyage en cours..."
    if [ -d "$FHIRHUB_DIR" ]; then
        cd "$FHIRHUB_DIR"
        $DOCKER_COMPOSE_CMD down 2>/dev/null || true
    fi
    exit 1
}

# Gestionnaire de signaux
trap cleanup_on_error ERR

# Point d'entr√©e principal
main() {
    echo "üöÄ Installation FHIRHub avec Docker"
    echo "===================================="
    echo
    
    check_prerequisites
    check_ports
    setup_project
    create_directory_structure
    setup_permissions
    setup_environment
    start_services
    wait_for_services
    run_validation_tests
    display_final_info
}

# V√©rifier si le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi