/**
 * Routes optimis√©es pour l'analyse de ressources FHIR via des fournisseurs d'IA
 * Version corrig√©e avec gestion d'erreurs robuste et optimisations de performance
 * @module routes/ai-fhir-analyze-fixed
 */

const express = require('express');
const router = express.Router();
const fhirService = require('../utils/fhirService');

// Service IA optimis√© avec gestion d'erreurs am√©lior√©e
let aiService;
try {
    aiService = require('../utils/aiServiceOptimized');
    console.log('[AI-FIXED] Service IA optimis√© charg√© avec succ√®s');
} catch (error) {
    console.error("Erreur lors de l'importation de aiServiceOptimized:", error.message);
    try {
        aiService = require('../utils/aiService');
        console.log('[AI-FIXED] Fallback vers aiService standard');
    } catch (fallbackError) {
        console.error("Erreur lors du fallback aiService:", fallbackError.message);
        aiService = {
            generateResponse: async () => "Service IA non disponible"
        };
    }
}

let aiProviderService;
try {
    aiProviderService = require('../utils/aiProviderService');
} catch (error) {
    console.error("Erreur lors de l'importation de aiProviderService:", error.message);
    aiProviderService = {
        getActiveAIProvider: async () => null,
        getAllAIProviders: async () => []
    };
}

const getProvider = aiProviderService.getActiveAIProvider;

/**
 * Optimise et filtre les donn√©es patient pour l'IA
 * R√©duit la taille des donn√©es et √©limine le bruit
 */
function optimizePatientDataForAI(patientSummary) {
    const optimized = {
        patient: {},
        conditions: [],
        observations: [],
        medications: [],
        encounters: []
    };

    // Optimiser les donn√©es patient (garder seulement l'essentiel)
    if (patientSummary.patient) {
        const patient = patientSummary.patient;
        optimized.patient = {
            id: patient.id,
            name: patient.name?.[0] || {},
            gender: patient.gender,
            birthDate: patient.birthDate,
            address: patient.address?.[0] || {},
            telecom: patient.telecom?.slice(0, 2) || [] // Limiter √† 2 contacts
        };
    }

    // Filtrer et limiter les conditions (max 10 plus r√©centes)
    if (patientSummary.conditions && Array.isArray(patientSummary.conditions)) {
        optimized.conditions = patientSummary.conditions
            .filter(condition => condition.code && condition.code.text)
            .slice(0, 10)
            .map(condition => ({
                id: condition.id,
                code: condition.code.text || condition.code.coding?.[0]?.display,
                status: condition.clinicalStatus?.coding?.[0]?.code,
                recordedDate: condition.recordedDate,
                severity: condition.severity?.coding?.[0]?.display
            }));
    }

    // Filtrer et limiter les observations (max 15 plus r√©centes)
    if (patientSummary.observations && Array.isArray(patientSummary.observations)) {
        optimized.observations = patientSummary.observations
            .filter(obs => obs.code && (obs.code.text || obs.valueQuantity || obs.valueString))
            .slice(0, 15)
            .map(obs => ({
                id: obs.id,
                code: obs.code.text || obs.code.coding?.[0]?.display,
                value: obs.valueQuantity?.value || obs.valueString || obs.valueCodeableConcept?.text,
                unit: obs.valueQuantity?.unit,
                effectiveDateTime: obs.effectiveDateTime,
                status: obs.status
            }));
    }

    // Filtrer et limiter les m√©dicaments (max 10)
    if (patientSummary.medications && Array.isArray(patientSummary.medications)) {
        optimized.medications = patientSummary.medications
            .slice(0, 10)
            .map(med => ({
                id: med.id,
                medication: med.medicationCodeableConcept?.text || med.medicationReference?.display,
                status: med.status,
                authoredOn: med.authoredOn,
                dosage: med.dosageInstruction?.[0]?.text
            }));
    }

    // Filtrer et limiter les consultations (max 8 plus r√©centes)
    if (patientSummary.encounters && Array.isArray(patientSummary.encounters)) {
        optimized.encounters = patientSummary.encounters
            .slice(0, 8)
            .map(encounter => ({
                id: encounter.id,
                status: encounter.status,
                class: encounter.class?.display,
                type: encounter.type?.[0]?.text,
                period: encounter.period,
                reasonCode: encounter.reasonCode?.[0]?.text
            }));
    }

    return optimized;
}

/**
 * G√©n√®re un prompt m√©dical s√©curis√© et optimis√©
 */
function generateMedicalPrompt(optimizedData, isQuestion = false, question = null) {
    // Validation stricte du contexte m√©dical
    if (!optimizedData.patient || !optimizedData.patient.id) {
        throw new Error('Donn√©es patient invalides pour l\'analyse m√©dicale');
    }

    const stats = {
        conditions: optimizedData.conditions.length,
        observations: optimizedData.observations.length,
        medications: optimizedData.medications.length,
        encounters: optimizedData.encounters.length
    };

    if (isQuestion && question) {
        return `CONTEXTE M√âDICAL STRICT - R√âPONDRE UNIQUEMENT √Ä LA QUESTION POS√âE

Question du professionnel de sant√©: "${question}"

DONN√âES PATIENT AUTHENTIFI√âES:
Patient ID: ${optimizedData.patient.id}
Nom: ${JSON.stringify(optimizedData.patient.name)}
Sexe: ${optimizedData.patient.gender}
Date de naissance: ${optimizedData.patient.birthDate}

CONDITIONS M√âDICALES (${stats.conditions} √©l√©ments):
${JSON.stringify(optimizedData.conditions, null, 2)}

OBSERVATIONS CLINIQUES (${stats.observations} √©l√©ments):
${JSON.stringify(optimizedData.observations, null, 2)}

TRAITEMENTS (${stats.medications} √©l√©ments):
${JSON.stringify(optimizedData.medications, null, 2)}

CONSULTATIONS (${stats.encounters} √©l√©ments):
${JSON.stringify(optimizedData.encounters, null, 2)}

INSTRUCTIONS STRICTES:
- R√©pondre UNIQUEMENT √† la question pos√©e
- Se baser EXCLUSIVEMENT sur les donn√©es m√©dicales fournies
- Rester dans le contexte m√©dical et clinique
- Si l'information n'est pas disponible, le dire clairement
- R√©ponse concise et professionnelle`;
    }

    return `ANALYSE M√âDICALE COMPL√àTE - DOSSIER PATIENT FHIR

MISSION: Analyser les donn√©es m√©dicales FHIR du patient et g√©n√©rer un rapport clinique complet.

DONN√âES PATIENT AUTHENTIFI√âES:
Patient ID: ${optimizedData.patient.id}
Nom: ${JSON.stringify(optimizedData.patient.name)}
Sexe: ${optimizedData.patient.gender}
Date de naissance: ${optimizedData.patient.birthDate}

CONDITIONS M√âDICALES ACTIVES (${stats.conditions} √©l√©ments):
${JSON.stringify(optimizedData.conditions, null, 2)}

OBSERVATIONS ET R√âSULTATS (${stats.observations} √©l√©ments):
${JSON.stringify(optimizedData.observations, null, 2)}

TRAITEMENTS ET M√âDICAMENTS (${stats.medications} √©l√©ments):
${JSON.stringify(optimizedData.medications, null, 2)}

CONSULTATIONS ET SOINS (${stats.encounters} √©l√©ments):
${JSON.stringify(optimizedData.encounters, null, 2)}

DIRECTIVES POUR LE RAPPORT M√âDICAL:
1. G√©n√©rer un rapport HTML m√©dical structur√©
2. Inclure OBLIGATOIREMENT toutes les sections disponibles
3. Analyser chronologiquement l'√©volution du patient
4. Identifier les probl√®mes de sant√© prioritaires
5. Proposer des recommandations cliniques bas√©es sur les donn√©es
6. Utiliser un langage m√©dical professionnel
7. Structurer avec des √©l√©ments HTML (<div>, <h3>, <ul>, <li>, <table>)
8. Rester STRICTEMENT dans le contexte m√©dical et clinique

Le rapport doit √™tre un document m√©dical authentique, pas un contenu g√©n√©rique.`;
}

/**
 * G√©n√®re un r√©sum√© de base en cas d'√©chec de l'IA
 */
function generateBasicMedicalSummary(patientData) {
    const stats = {
        conditions: patientData.conditions?.length || 0,
        observations: patientData.observations?.length || 0,
        medications: patientData.medications?.length || 0,
        encounters: patientData.encounters?.length || 0
    };

    return `
    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #007bff;">
            <h3 style="margin: 0 0 10px 0; color: #007bff;">üìã R√©sum√© M√©dical de Base</h3>
            <p style="margin: 0; color: #666;">G√©n√©r√© automatiquement depuis les donn√©es FHIR</p>
        </div>

        <div style="background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px;">
            <h4 style="color: #333; margin-top: 0;">üë§ Informations Patient</h4>
            <p><strong>ID:</strong> ${patientData.patient?.id || 'Non sp√©cifi√©'}</p>
            <p><strong>Nom:</strong> ${patientData.patient?.name?.[0]?.family || ''} ${patientData.patient?.name?.[0]?.given?.join(' ') || ''}</p>
            <p><strong>Sexe:</strong> ${patientData.patient?.gender || 'Non sp√©cifi√©'}</p>
            <p><strong>Date de naissance:</strong> ${patientData.patient?.birthDate || 'Non sp√©cifi√©e'}</p>
        </div>

        <div style="background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px;">
            <h4 style="color: #333; margin-top: 0;">üìä Statistiques du Dossier</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;">
                <div style="text-align: center; padding: 10px; background: #e3f2fd; border-radius: 6px;">
                    <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${stats.conditions}</div>
                    <div style="color: #666;">Conditions</div>
                </div>
                <div style="text-align: center; padding: 10px; background: #f3e5f5; border-radius: 6px;">
                    <div style="font-size: 24px; font-weight: bold; color: #7b1fa2;">${stats.observations}</div>
                    <div style="color: #666;">Observations</div>
                </div>
                <div style="text-align: center; padding: 10px; background: #e8f5e8; border-radius: 6px;">
                    <div style="font-size: 24px; font-weight: bold; color: #388e3c;">${stats.medications}</div>
                    <div style="color: #666;">M√©dicaments</div>
                </div>
                <div style="text-align: center; padding: 10px; background: #fff3e0; border-radius: 6px;">
                    <div style="font-size: 24px; font-weight: bold; color: #f57c00;">${stats.encounters}</div>
                    <div style="color: #666;">Consultations</div>
                </div>
            </div>
        </div>

        <div style="background: #fffbf0; padding: 15px; border-radius: 8px; border-left: 4px solid #ff9800;">
            <p style="margin: 0; color: #f57c00;"><strong>‚ÑπÔ∏è Note:</strong> Ceci est un r√©sum√© de base g√©n√©r√© en l'absence du service d'IA. Pour une analyse m√©dicale compl√®te, veuillez configurer un fournisseur d'IA actif.</p>
        </div>
    </div>`;
}

/**
 * Route optimis√©e pour l'analyse de patient avec gestion robuste des erreurs
 */
router.post('/analyze-patient', async (req, res) => {
    console.log('[AI-FIXED] Analyse patient demand√©e - version optimis√©e');
    
    // Timeout r√©duit mais raisonnable (90 secondes)
    const ROUTE_TIMEOUT = 90000;
    let timeoutHandle = setTimeout(() => {
        console.warn('[AI-FIXED] Timeout atteint apr√®s 90 secondes');
        if (!res.headersSent) {
            res.status(503).json({
                success: false,
                message: 'D√©lai d\'attente d√©pass√© - service temporairement surcharg√©',
                error: 'TIMEOUT',
                fallback: true
            });
        }
    }, ROUTE_TIMEOUT);
    
    try {
        res.on('finish', () => clearTimeout(timeoutHandle));
        
        const { patientId, serverUrl, patientData, question, chatbot } = req.body;
        
        console.log('[AI-FIXED] Param√®tres re√ßus:', { 
            patientId, 
            serverUrl: serverUrl?.substring(0, 50) + '...', 
            hasPatientData: !!patientData,
            isQuestion: !!(question && chatbot)
        });
        
        if (!patientId || !serverUrl) {
            return res.status(400).json({
                success: false,
                message: 'Param√®tres manquants: patientId et serverUrl requis'
            });
        }
        
        // R√©cup√©ration des donn√©es patient avec optimisation
        let patientSummary;
        
        if (patientData && typeof patientData === 'object' && Object.keys(patientData).length > 0) {
            console.log('[AI-FIXED] Utilisation des donn√©es patient fournies');
            patientSummary = patientData;
        } else {
            try {
                console.log('[AI-FIXED] R√©cup√©ration des donn√©es depuis le serveur FHIR');
                patientSummary = await fhirService.getPatientSummary(serverUrl, patientId);
            } catch (error) {
                console.error('[AI-FIXED] Erreur r√©cup√©ration FHIR:', error.message);
                return res.status(500).json({
                    success: false,
                    message: 'Impossible de r√©cup√©rer les donn√©es patient',
                    error: error.message
                });
            }
        }
        
        if (!patientSummary || !patientSummary.patient) {
            return res.status(404).json({
                success: false,
                message: 'Patient non trouv√© ou donn√©es insuffisantes'
            });
        }
        
        // Optimisation des donn√©es pour l'IA
        console.log('[AI-FIXED] Optimisation des donn√©es patient pour l\'IA');
        const optimizedData = optimizePatientDataForAI(patientSummary);
        
        console.log('[AI-FIXED] Donn√©es optimis√©es:', {
            conditions: optimizedData.conditions.length,
            observations: optimizedData.observations.length,
            medications: optimizedData.medications.length,
            encounters: optimizedData.encounters.length
        });
        
        let analysis;
        
        try {
            // V√©rifier la disponibilit√© d'un fournisseur IA
            const aiProvider = await getProvider();
            
            if (!aiProvider) {
                console.warn('[AI-FIXED] Aucun fournisseur IA actif - utilisation du r√©sum√© de base');
                analysis = generateBasicMedicalSummary(optimizedData);
            } else {
                console.log('[AI-FIXED] Fournisseur IA actif:', aiProvider.provider_type);
                
                // G√©n√©rer un prompt m√©dical s√©curis√©
                const prompt = generateMedicalPrompt(
                    optimizedData, 
                    !!(question && chatbot), 
                    question
                );
                
                console.log('[AI-FIXED] Longueur du prompt:', prompt.length, 'caract√®res');
                
                // Param√®tres optimis√©s pour l'IA
                const aiParams = {
                    prompt,
                    maxTokens: question && chatbot ? 1000 : 2500, // Moins de tokens pour les questions
                    temperature: 0.2, // Temp√©rature faible pour des r√©ponses m√©dicales pr√©cises
                    retryCount: 2 // Moins de tentatives pour √©viter les timeouts
                };
                
                console.log('[AI-FIXED] Appel IA avec param√®tres optimis√©s');
                analysis = await aiService.generateResponse(aiParams);
                
                console.log('[AI-FIXED] Analyse IA g√©n√©r√©e avec succ√®s');
            }
            
        } catch (error) {
            console.error('[AI-FIXED] Erreur lors de l\'analyse IA:', error.message);
            
            // Gestion sp√©cifique des erreurs communes
            if (error.message.includes('429') || error.message.includes('capacity')) {
                console.log('[AI-FIXED] Erreur de capacit√© IA - utilisation du r√©sum√© de base');
                analysis = generateBasicMedicalSummary(optimizedData);
            } else if (error.message.includes('timeout') || error.message.includes('ECONNRESET')) {
                console.log('[AI-FIXED] Timeout IA - utilisation du r√©sum√© de base');
                analysis = generateBasicMedicalSummary(optimizedData);
            } else {
                console.log('[AI-FIXED] Erreur IA g√©n√©rique - utilisation du r√©sum√© de base');
                analysis = generateBasicMedicalSummary(optimizedData);
            }
        }
        
        // Validation de la r√©ponse
        if (!analysis || analysis.trim().length === 0) {
            console.warn('[AI-FIXED] Analyse vide - g√©n√©ration du r√©sum√© de base');
            analysis = generateBasicMedicalSummary(optimizedData);
        }
        
        // V√©rification de contamination (d√©tection de contenu non m√©dical)
        if (analysis.includes('appel d\'offres') || analysis.includes('march√© public') || analysis.includes('soumission')) {
            console.error('[AI-FIXED] Contamination d√©tect√©e dans la r√©ponse IA - utilisation du r√©sum√© de base');
            analysis = generateBasicMedicalSummary(optimizedData);
        }
        
        clearTimeout(timeoutHandle);
        
        return res.status(200).json({
            success: true,
            analysis,
            metadata: {
                optimized: true,
                dataStats: {
                    conditions: optimizedData.conditions.length,
                    observations: optimizedData.observations.length,
                    medications: optimizedData.medications.length,
                    encounters: optimizedData.encounters.length
                },
                processingTime: Date.now()
            }
        });
        
    } catch (error) {
        console.error('[AI-FIXED] Erreur g√©n√©rale:', error);
        clearTimeout(timeoutHandle);
        
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'Erreur lors de l\'analyse du patient',
                error: error.message,
                fallback: true
            });
        }
    }
});

module.exports = router;